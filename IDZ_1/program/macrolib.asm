.macro	read_int(%x)			# Определение макроса read_int, принимающего один параметр %x (регистр для хранения результата).
	li, a7, 5			# Загружаем код системного вызова 5 (read_int) в регистр a7 для ввода целого числа.	
	ecall				# Выполняем системный вызов.
	mv %x, a0			# Копируем полученное значение из регистра a0 в указанный регистр %x.
.end_macro

# Макрос для вывода целого числа
.macro print_int(%x)			# Определение макроса print_int, принимающего регистр %x (число для вывода).
	li, a7, 1			# Загружаем код системного вызова 1 (print_int) в регистр a7 для вывода числа.
	mv a0, %x			# Копируем значение из %x в регистр a0 для передачи в системный вызов.
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для вывода строки по адресу
.macro print_string_adress(%x)		# Определение макроса print_string_adress, принимающего адрес строки %x.
	li, a7, 4			# Загружаем код системного вызова 4 (print_string) в регистр a7 для вывода 
	mv a0, %x			# Копируем адрес строки из %x в регистр
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для вывода строки
.macro print_string(%x)			# Определение макроса print_string, принимающего метку %x (адрес строки).
	la, a0, %x			# Загружаем адрес строки (метки) %x в регистр a0.
	li, a7, 4			# Загружаем код системного вызова 4 (print_string) в регистр a7 для вывода строки.
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для завершения программы
.macro end_program			# Определение макроса end_program без параметров.
	li, a7, 10			# Загружаем код системного вызова 10 (exit) в регистр a7 для завершения программы.
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для вывода массива целых чисел
.macro print_array(%array_ptr, %count)	# Определение макроса print_array, принимающего указатель на массив и его размер.
    mv   a5, %array_ptr    		# Копируем указатель на массив в регистр a5.
    mv   a6, %count        		# Копируем количество элементов массива в регистр a6.

print_array_loop:			# Метка для начала цикла.
    beqz a6, end_print  		# Если a6 (количество элементов) равно 0, переход к метке end_print.
    lw   a0, (a5)           		# Загружаем следующий элемент массива (4 байта) в регистр a0.
    print_int(a0)           		# Вызываем макрос print_int для вывода элемента массива.
    print_string(print_space)  		# Вызываем макрос print_string для вывода пробела между числами.

    addi a5, a5, 4            		# Смещаем указатель a5 на следующий элемент массива.
    addi a6, a6, -1           		# Уменьшаем счетчик элементов на 1.
    j    print_array_loop    		# Переход к началу цикла.
     
end_print:				# Метка для завершения вывода массива.
.end_macro