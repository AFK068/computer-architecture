#import "template.typ": *
#let title = "ИДЗ-4"
#let author = "Гобец Иван Евгеньевич. БПИ 237. Вариант 31"
#let course_id = "АВС"
#let semester = "Декабрь 2024"
#set enum(numbering: "1)")
#show: assignment_class.with(title, author, course_id, semester)

#prob([
  *Задача о Пути Кулака. На седых склонах Гималаев стоит древний буддистский монастырь: Гуань-Инь-Янь. Каждый год в день сошествия на землю боддисатвы монахи монастыря собираются на совместное празднество и показывают  свое совершенствование на Пути Кулака. Всех соревнующихся монахов первоначально разбивают на пары. Бои продолжаются до выявления победителя. Монах который победил в финальном бою, забирает себе на хранение статую боддисатвы. Реализовать многопоточное приложение, определяющего победителя. В качестве входных данных используется массив, в котором хранится количество энергии Ци каждого монаха. При победе монах забирает энергию Ци своего противника. Новые пары образуются среди победителей других пар в порядке завершения поединков. То есть, возможна ситуация, когда бойцы, участвующие в поединке могут быстро победить и начать биться с 20 другими, в то время как поединки начавшиеся ранее, могут продолжаться. Причем длительное время. Каждый поединок протекает некоторое случайное время, которое пропорционально отношению энергии Ци побежденного к энергии Ци победитея, умноженному на поправочный коэффициент, позволяющий отслеживать протекание поединка на экране дисплея (например, путем умножения этого отношения на 1000 миллисекунд или другое более удобное значение).*
], "Условие варината 31")

#prob([
  Отчет сразу начинается с оценки на 9, так как, спросив у семинариста, он сказал, что можно так сделать. 

  - Далее буду предоставлять блоки по различным частям кода (для понятности, чтобы не было все подряд). 
  - Ещё я пытался, все строчки кода комментировать для более понятного пояснения в отчете. 
], "Дисклеймер")

#prob([
  Для начала, я объясню, как запускать программу через флаги и какие параметры есть.

  Доступные флаги:\
  *-generate* - флаг для автоматической генерации данных. Если вы указываете этот флаг вам обязтельно нужно указать слудующие 3 флага: \
  $spaceb spaceb$*-left* - левая граница генерируемых показателей\
  $spaceb spaceb$*-right* - правая граница генерируемых показателей\
  $spaceb spaceb$*-monks* - количество данных для генрации\
  *-input* - имя файла с входными данными\
  *-output* - имя файла с выходными данными\
  *-direct* - ввод данных вручную (через запятую).\

  - Важное замечание, если вы указали флаг *-generate*, то *-input* или *-direct* работать уже не будут, т.е. он имеет самый высокий приоритет. Далее по приоритету идет *-input*, а потом *-direct*.

],"Запуск программы")

#prob([
   *Сценарий поведения сущностей в предметной области.* \
  - Описание: В программе участвуют монахи, обладающие энергией Ци. Они соревнуются друг с другом в боевых поединках, чтобы определить самого сильного. Каждый поединок длится случайное время, которое зависит от энергии Ци участников. Победитель забирает энергию побежденного.
  - Роли: Монахи участвуют в боях, теряя или увеличивая свою энергию Ци.
  - Система поединков: Организует битвы между монахами в параллельных потоках.
  - Пул монахов: Содержит всех участников и управляет их очередностью для боев.
  - Сценарий: Все монахи начинают с различным уровнем энергии Ци. В параллельных потоках выбираются пары монахов для поединков. Победители возвращаются в пул, чтобы продолжить борьбу, пока не останется только один финальный победитель.

  #line(length: 100%)

  *Модель параллельных вычислений.* \
  - Программа реализует *итеративный параллелизм,* где несколько идентичных потоков (монахов) выполняют свою работу (поединки) одновременно.
  - Синхронизация обеспечивается с помощью POSIX мьютексов, чтобы предотвратить одновременный доступ к пулу монахов и избежать состояния гонки.

  #line(length: 100%)
  *Обобщенный алгоритм:* \
  Программа моделирует соревнование монахов следующим образом:
  - Создаются монахи с уникальными идентификаторами и случайной/заданной энергией.
  - В параллельных потоках из пула монахов выбираются пары для поединков.
  - Каждый поток проводит бой, определяя победителя и возвращая его в пул.
  - Процесс продолжается, пока в пуле не останется один монах (победитель).

], "Сценарии/модели/алгориты")

#prob([
  Входные данные представлены в 3 типах:\
  - *Генерация данных:* Программа генерирует случайные данные для монахов в заданном диапазоне.
  - *Ввод данных:* Пользователь вводит данные вручную через аргументы командной строки.
  - *Чтение данных с файла:* Программа считывает данные из файла, который содержит информацию о монахах.
  

  *Генерация данных:* \
  Пример генерации с помощью командной строки:\
   *./main -generate -left 10 -right 100 -monks 1000*
  \ 

  *Ввод данных:* \
  Пример ввода с помощью командной строки: \
  *./main -direct 10, 20, 30, 40, 50*
  \

  *Чтение данных с файла:*\
  Пример ввода с помощью файла: \
  *./main -input file_name.txt*
], "Входные данные")

#prob([
  - *Вывод данных в консоль: * \
  Использовалас генерация данных: *./main -generate -left 10 -right 1000 -monks 10*
  #image("1.png")

  - *Вывод данных в файл и консоль: * \
  Вывод данных в консоль производится всегда, но с помощью параметра *-output file_name.txt* можно еще сохранить данные в файл: *./main -generate -left 10 -right 1000 -monks 10 -output example.txt* \
  #image("2.png")

], "Вывод данных")

#pagebreak()

#prob([
  *Рандомная герация: * \
  *./main -generate -left 10 -right 1000 -monks 10*
  #image("3.png")

  *Считывание с файла: * \
  *./main -input data/test1.txt* 
  #image("7.png")
  #image("4.png")

  *Ручной ввод: * \
  *./main -direct 10,20,30,40,50,60,70*
  #image("5.png")
], "Результаты работы программы")

#pagebreak()

#prob([
  - Новое решение предоставлено в папке *another_solution_9*.
  Приведен сравнительный анализ поведения с ранее разработанной программой. При зафиксированном сиде две прогрпммы показывают одинаковые результаты.
  #image("8.png")

  == Test 1
  #image("9_1.png")
  == Test 2
  #image("9_2.png")
], "Отчет на 9")