# Макрос для чтения числа типа int
.macro	read_int(%x)			# Определение макроса read_int, принимающего один параметр %x (регистр для хранения результата).
	li, a7, 5			# Загружаем код системного вызова 5 (read_int) в регистр a7 для ввода целого числа.	
	ecall				# Выполняем системный вызов.
	mv %x, a0			# Копируем полученное значение из регистра a0 в указанный регистр %x.
.end_macro

# Макрос для вывода целого числа
.macro print_int(%x)			# Определение макроса print_int, принимающего регистр %x (число для вывода).
	li, a7, 1			# Загружаем код системного вызова 1 (print_int) в регистр a7 для вывода числа.
	mv a0, %x			# Копируем значение из %x в регистр a0 для передачи в системный вызов.
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для вывода double
.macro print_double(%x)			# Определение макроса print_double, принимающего регистр %x (число для вывода).
	li, a7, 3			# Загружаем код системного вызова 3 (print_double) в регистр a7 для вывода числа.
	fmv.d fa0, %x			# Копируем значение из %x в регистр fa0 для передачи в системный вызов.
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для вывода строки
.macro print_string(%x)			# Определение макроса print_string, принимающего метку %x (адрес строки).
	la, a0, %x			# Загружаем адрес строки (метки) %x в регистр a0.
	li, a7, 4			# Загружаем код системного вызова 4 (print_string) в регистр a7 для вывода строки.
	ecall				# Выполняем системный вызов.
.end_macro

# Макрос для завершения программы
.macro end_program			# Определение макроса end_program без параметров.
	li, a7, 10			# Загружаем код системного вызова 10 (exit) в регистр a7 для завершения программы.
	ecall				# Выполняем системный вызов.
.end_macro